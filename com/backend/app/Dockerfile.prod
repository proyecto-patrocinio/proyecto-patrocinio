# Here,  we used a Docker multi-stage build to reduce the final image size..
# Essentially, builder is a temporary image that's used for building the Python wheels. 
# The final image is a much smaller image that only contains the Python wheels and the application code.


###########
# BUILDER #
###########

# pull official base image
FROM python:3.11.1-alpine as builder

# set work directory
WORKDIR /usr/src/app

# set environment variables
#   - PYTHONDONTWRITEBYTECODE: Evita que Python escriba 
#      archivos pyc en el disco (equivalente a la python -B opción )
#   - PYTHONUNBUFFERED: evita que Python almacene en búfer stdout y 
#       stderr (equivalente a la python -u opción )
ENV PYTHONUNBUFFERED 1 
ENV PYTHONDONTWRITEBYTECODE 1 


# install psycopg2 dependencies
RUN apk update \
    && apk add postgresql-dev gcc python3-dev musl-dev \
    && apk add dos2unix redis

# install flake8
# this library to check errors in code and make sure there 
# is no undefined variables or imports that are not being used.
RUN pip install --upgrade pip
RUN pip install flake8==6.0.0
COPY . .
RUN flake8 --ignore=E501,F401 api_patrocinio 

# install dependencies
COPY ./requirements.txt .
RUN pip wheel --no-cache-dir --no-deps --wheel-dir /usr/src/app/wheels -r requirements.txt


#########
# FINAL #
#########

# pull official base image
FROM python:3.11.1-alpine

# create directory for the app user
RUN mkdir -p /home/app

# create the app user
RUN addgroup -S app && adduser -S app -G app


# create the appropriate directories
ENV HOME=/home/app
ENV APP_HOME=/home/app/api
RUN mkdir $APP_HOME
RUN mkdir $APP_HOME/staticfiles
# BASE_FILES_PATH default is /opt/patrocinio/
ENV BASE_FILES_PATH=${ATTACHMENT_BASE_DIRECTORY:-/opt/patrocinio/}
RUN mkdir $BASE_FILES_PATH


WORKDIR $APP_HOME


# install dependencies
RUN apk update && apk add libpq
COPY --from=builder /usr/src/app/wheels /wheels
COPY --from=builder /usr/src/app/requirements.txt .
COPY --from=builder /usr/src/app/entrypoint.prod.sh .
RUN pip install --no-cache /wheels/*

# copy entrypoint.prod.sh
COPY ./entrypoint.prod.sh .
RUN sed -i 's/\r$//g'  $APP_HOME/entrypoint.prod.sh
RUN dos2unix $APP_HOME/entrypoint.prod.sh
RUN chmod +x  $APP_HOME/entrypoint.prod.sh

# copy project
COPY . $APP_HOME

# chown all the files to the app user
RUN chown -R app:app $APP_HOME
RUN chown -R app:app $BASE_FILES_PATH

# change to the app user
USER app

# run entrypoint.prod.sh
ENTRYPOINT ["/home/app/api/entrypoint.prod.sh"]